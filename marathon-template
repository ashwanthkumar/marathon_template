#!/usr/bin/python

import argparse
import urllib2
import json
from jinja2 import Environment, Template, FileSystemLoader

from app.properties import Properties
from app.marathon import MarathonTaskInfo
from app.marathon_apps import MarathonAppInfo

def to_set(param, sep=','):
  return set(param.split(sep))

def http(url):
  print "Fetching from %s " % url
  req = urllib2.Request(url)
  response = urllib2.urlopen(req)
  return json.loads(response.read())

def tasks(app_tasks):
  def task_info(host, ports):
    try:
      return MarathonTaskInfo(host, ports)
    except:
      return None
  tasks = filter(lambda x: x is not None, map(lambda task: task_info(task["host"], task["ports"]), app_tasks))
  return sorted(tasks, key=lambda task: task.name())

def fetch_apps(marathon_uri):
  apps = http(marathon_uri+"/v2/apps?embed=apps.tasks")
  app_settings = apps["apps"]
  def app_info(app_config):
    try:
      return MarathonAppInfo(str(app_config["id"].split("/")[1]), app_config["labels"], app_config["tasks"])
    except:
      return None
  return filter(lambda x: x is not None, map(lambda appConfig: app_info(appConfig), app_settings))

def get_apps_to_monitor(app_configs, app_names_to_monitor):
  return filter(lambda app_config: app_config.should_monitor(app_names_to_monitor), app_configs)

def get_tasks(app_configs):
  return {app.name: tasks(app.tasks) for app in app_configs}

def get_properties(path, app_configs):
  properties = Properties.load(path)
  for app_config in app_configs:
    if app_config.has_portlabel():
      properties[app_config.name+"_port"] = app_config.get_port()
  return properties

def render(template, out_file, app_configs):
  env = Environment(loader=FileSystemLoader('templates'))
  template_name = template.split(".")[0]

  properties = get_properties("conf/"+template_name+".properties", app_configs)

  tasks = get_tasks(app_configs)
  template = env.get_template(template)
  rendered_template = template.stream(j2 = tasks, props = {template_name : properties})

  rendered_template.dump(out_file)

class MarathonTemplate(object):
  def __init__(self, marathon, apps):
    pass

if __name__ == '__main__':
  argumentParser = argparse.ArgumentParser(prog='marathon_template', description='Script that\'s used to generate ha_proxy config file from marathon')
  argumentParser.add_argument('-m', '--marathon', help='Marathon URI', required=True)
  argumentParser.add_argument('-a', '--app_name', type=to_set, help='App name for which haproxy config needs to be generated', required=True)
  argumentParser.add_argument('-t', '--template_file', help='Template file which on which rendering would be done', required=True)
  argumentParser.add_argument('-o', '--out_file', help='Output file', required=True)

  args = argumentParser.parse_args()

  all_app_configs = fetch_apps(args.marathon)
  apps_to_monitor = get_apps_to_monitor(all_app_configs, args.app_name)

  render(args.template_file, args.out_file, apps_to_monitor)
